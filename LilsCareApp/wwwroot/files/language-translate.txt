To create a website in multiple languages using C# MVC (Model-View-Controller), you typically follow these steps:

1. **Resource Files**: Create resource files (.resx) for each language you want to support. These files contain key-value pairs for each string you want to translate.

2. **Localization Middleware**: Configure localization middleware in your `Startup.cs` file. This middleware detects the language preference of the user and sets the current culture accordingly.

3. **Language Selector**: Provide a way for users to switch between languages, such as a dropdown menu or buttons.

4. **Translate Views and Content**: Translate all the static content in your views and layouts using the resource files.

5. **Dynamic Content Translation**: For dynamic content, such as database-driven content, you may need to implement mechanisms to retrieve and display content in the appropriate language based on the user's selection.

Here's a more detailed guide:

### 1. Resource Files

Create resource files for each language you want to support. For example, `Resources.en.resx` for English and `Resources.fr.resx` for French. These files contain key-value pairs like:

```plaintext
Key            |   Value
-----------------------------------------
WelcomeMessage |   Welcome to our website!
```

### 2. Localization Middleware

In your `Startup.cs`, configure localization services and middleware:

```csharp
public void ConfigureServices(IServiceCollection services)
{
    services.AddLocalization(options => options.ResourcesPath = "Resources");
    // Other services configuration
}

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    var supportedCultures = new[]
    {
        new CultureInfo("en"),
        new CultureInfo("fr"),
        // Add more supported cultures as needed
    };

    app.UseRequestLocalization(new RequestLocalizationOptions
    {
        DefaultRequestCulture = new RequestCulture("en"),
        SupportedCultures = supportedCultures,
        SupportedUICultures = supportedCultures
    });

    // Other middleware configuration
}
```

### 3. Language Selector

Create a language selector in your layout or views to allow users to switch between languages. For example:

```html
<form asp-controller="Language" asp-action="SetLanguage" method="post" role="form">
    <select name="culture" asp-for="@Model.Culture" asp-items="Model.Cultures"></select>
    <input type="submit" value="Change Language" />
</form>
```

### 4. Translate Views and Content

Use the localized strings in your views:

```html
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

<h1>@Localizer["WelcomeMessage"]</h1>
```

### 5. Dynamic Content Translation

For dynamic content, you'll need to store translations in your database and retrieve them based on the user's language preference.

By following these steps, you can create a multi-language website using C# MVC.