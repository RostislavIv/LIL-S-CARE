// <auto-generated />
using System;
using LilsCareApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LilsCareApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240321092318_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.AddressDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Address Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Address");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("App User Id");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Country");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("District");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("First Name Recipient");

                    b.Property<bool>("IsShippingToOffice")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Last Name Recipient");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Phone Number Recipient");

                    b.Property<string>("PostCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Post Code");

                    b.Property<int?>("ShippingOfficeId")
                        .HasColumnType("int");

                    b.Property<string>("Town")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Town");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ShippingOfficeId");

                    b.ToTable("AddressDeliveries", t =>
                        {
                            t.HasComment("Address Delivery");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "bul. Vitosha",
                            AppUserId = "d24ea792-6d5a-40a8-980c-71c2c9711113",
                            Country = "Bulgaria",
                            District = "Sofia",
                            FirstName = "Ivan",
                            IsShippingToOffice = false,
                            LastName = "Ivanov",
                            PhoneNumber = "0888888888",
                            PostCode = "1000",
                            ShippingOfficeId = 1,
                            Town = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            Address = "bul. Vitosha",
                            AppUserId = "d24ea792-6d5a-40a8-980c-71c2c9711113",
                            Country = "Bulgaria",
                            District = "Sofia",
                            FirstName = "Petar",
                            IsShippingToOffice = false,
                            LastName = "Petrov",
                            PhoneNumber = "0888888888",
                            PostCode = "1000",
                            ShippingOfficeId = 2,
                            Town = "Sofia"
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DefaultAddressDeliveryId")
                        .HasColumnType("int")
                        .HasComment("Default Address Delivery Id");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("First Name");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("The image of user");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Last Name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultAddressDeliveryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("App User");
                        });

                    b.HasData(
                        new
                        {
                            Id = "d24ea792-6d5a-40a8-980c-71c2c9711113",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "347fbbd1-e522-4456-ac44-c0dd35084461",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TEST@SOFTUNI.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEDdAcGDVA5LFr5XJeqx7/yVzmisv94CwXksxiuOLzd18dL3ny/NDozOguAAMrNBv9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4106eb64-6c0f-4574-a1c3-ed4922764e2d",
                            TwoFactorEnabled = false,
                            UserName = "test@softuni.bg"
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.BagUser", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The user id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("The product id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("The quantity of the product that the user has added to his bag");

                    b.HasKey("AppUserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("BagsUsers", t =>
                        {
                            t.HasComment("This table contains the products that the user has added to his bag");
                        });

                    b.HasData(
                        new
                        {
                            AppUserId = "d24ea792-6d5a-40a8-980c-71c2c9711113",
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            AppUserId = "d24ea792-6d5a-40a8-980c-71c2c9711113",
                            ProductId = 2,
                            Quantity = 3
                        },
                        new
                        {
                            AppUserId = "d24ea792-6d5a-40a8-980c-71c2c9711113",
                            ProductId = 3,
                            Quantity = 4
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The category's primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The category's name");

                    b.HasKey("Id");

                    b.ToTable("Categories", t =>
                        {
                            t.HasComment("The category of the product");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "за тяло"
                        },
                        new
                        {
                            Id = 2,
                            Name = "за суха кожа"
                        },
                        new
                        {
                            Id = 3,
                            Name = "за мазна кожа"
                        },
                        new
                        {
                            Id = 4,
                            Name = "за лице"
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ImageProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The image id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("The path of the image");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ImageProducts", t =>
                        {
                            t.HasComment("The image of the product");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_24a7b0d7f63d42048f5a05e97362f385~mv2.jpg/v1/fill/w_301,h_665,al_c,q_85,usm_0.66_1.00_0.01/a6694c_24a7b0d7f63d42048f5a05e97362f385~mv2.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_263e877cdb774516bea29e2155049a0d~mv2.jpg/v1/fill/w_301,h_665,al_c,q_85,usm_0.66_1.00_0.01/a6694c_263e877cdb774516bea29e2155049a0d~mv2.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_69a0f0f6f1cf4847983b2248749af6cc~mv2.jpg/v1/fill/w_301,h_665,al_c,q_85,usm_0.66_1.00_0.01/a6694c_69a0f0f6f1cf4847983b2248749af6cc~mv2.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 4,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_57415abd6b2b4d1f86e4ed35cf155e0d~mv2.jpg/v1/fill/w_499,h_665,al_c,q_85,usm_0.66_1.00_0.01/a6694c_57415abd6b2b4d1f86e4ed35cf155e0d~mv2.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 5,
                            ImagePath = "https://video.wixstatic.com/video/a6694c_b61f40bc476a43578be260fce9fa6efa/1080p/mp4/file.mp4",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 6,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_75d8524a8fb046db82d0090671364c15~mv2.jpg/v1/fill/w_886,h_665,al_c,q_85,usm_0.66_1.00_0.01/a6694c_75d8524a8fb046db82d0090671364c15~mv2.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 7,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_2f611f06e55346e5b3b22c94c0bb8077~mv2.jpg/v1/fill/w_887,h_665,al_c,q_85,usm_0.66_1.00_0.01/a6694c_2f611f06e55346e5b3b22c94c0bb8077~mv2.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 8,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_1b60760d6a9e46f6ba0be663ab0cd432~mv2.jpg/v1/fill/w_499,h_665,al_c,q_85,usm_0.66_1.00_0.01/a6694c_1b60760d6a9e46f6ba0be663ab0cd432~mv2.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 9,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_7ce163b0f3e4461d9ee3ef5c16b972f4~mv2.jpg/v1/fill/w_499,h_665,al_c,q_85,usm_0.66_1.00_0.01/a6694c_7ce163b0f3e4461d9ee3ef5c16b972f4~mv2.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 10,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_8cf53b5caa60466b86d7e1e71035a5c1~mv2.jpg/v1/fill/w_886,h_665,al_c,q_85,usm_0.66_1.00_0.01/a6694c_8cf53b5caa60466b86d7e1e71035a5c1~mv2.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 11,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_dbfcc272e90a48f89dfa6930ee2b0355~mv2.jpg/v1/fill/w_499,h_665,al_c,q_85,usm_0.66_1.00_0.01/a6694c_dbfcc272e90a48f89dfa6930ee2b0355~mv2.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 12,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_44172c09d7974734aed4b4fa6474bac2~mv2.jpg/v1/fill/w_499,h_665,al_c,q_85,usm_0.66_1.00_0.01/a6694c_44172c09d7974734aed4b4fa6474bac2~mv2.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 13,
                            ImagePath = "https://video.wixstatic.com/video/a6694c_688be81645b14d1f9707a985aad784fb/1080p/mp4/file.mp4",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 14,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_40945dc6b1754f74ab2b9331a5d4c692~mv2.jpg/v1/fill/w_887,h_665,al_c,q_85,usm_0.66_1.00_0.01/a6694c_40945dc6b1754f74ab2b9331a5d4c692~mv2.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 15,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_dcb7369410054c2b8ffc9fa2f7a7854c~mv2.jpg/v1/fill/w_374,h_665,al_c,q_85,usm_0.66_1.00_0.01/a6694c_dcb7369410054c2b8ffc9fa2f7a7854c~mv2.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 16,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_5e4516f6b7294324b75d8577ed3b7112~mv2.jpg/v1/fill/w_374,h_665,al_c,q_85,usm_0.66_1.00_0.01/a6694c_5e4516f6b7294324b75d8577ed3b7112~mv2.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 17,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_955cfb52005d4979a9d170045f3bf603~mv2.jpg/v1/fill/w_374,h_665,al_c,q_85,usm_0.66_1.00_0.01/a6694c_955cfb52005d4979a9d170045f3bf603~mv2.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 18,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_22c2642fbcb14b9c83a1b7b5349cb654~mv2.png/v1/fill/w_831,h_665,al_c,usm_0.66_1.00_0.01/a6694c_22c2642fbcb14b9c83a1b7b5349cb654~mv2.png",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 19,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_9feeef67f1174acb9d05de346a5380f3~mv2.png/v1/fill/w_831,h_665,al_c,usm_0.66_1.00_0.01/a6694c_9feeef67f1174acb9d05de346a5380f3~mv2.png",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 20,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_331b7666ec214d1cb9eab348b23156e6~mv2.png/v1/fill/w_832,h_665,al_c,usm_0.66_1.00_0.01/a6694c_331b7666ec214d1cb9eab348b23156e6~mv2.png",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 21,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_8c8ef3eb0c7b4c009a08aecabee93d26~mv2.png/v1/fill/w_831,h_665,al_c,usm_0.66_1.00_0.01/a6694c_8c8ef3eb0c7b4c009a08aecabee93d26~mv2.png",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 22,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_f3173997361b4b1b83ad90f807bbaf85~mv2.png/v1/fill/w_831,h_665,al_c,usm_0.66_1.00_0.01/a6694c_f3173997361b4b1b83ad90f807bbaf85~mv2.png",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 23,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_6180737a52184e20a160a44b8b00cbc6~mv2.png/v1/fill/w_832,h_665,al_c,usm_0.66_1.00_0.01/a6694c_6180737a52184e20a160a44b8b00cbc6~mv2.png",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 24,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_0d7a1d6d29d0432b85ad84001ad13a9b~mv2.png/v1/fill/w_532,h_665,al_c,usm_0.66_1.00_0.01/a6694c_0d7a1d6d29d0432b85ad84001ad13a9b~mv2.png",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 25,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_2485f5b6aa434f04a31a359a58f370ce~mv2.png/v1/fill/w_831,h_665,al_c,usm_0.66_1.00_0.01/a6694c_2485f5b6aa434f04a31a359a58f370ce~mv2.png",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 26,
                            ImagePath = "https://video.wixstatic.com/video/a6694c_84516f7e298844d7954c342ceedba433/1080p/mp4/file.mp4",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 27,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_c3e384c8ca434dc6b7c2920f660579e3~mv2.png/v1/fill/w_532,h_665,al_c,usm_0.66_1.00_0.01/a6694c_c3e384c8ca434dc6b7c2920f660579e3~mv2.png",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 28,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_c4aefe2a5f294a0faf6a2f7c19af32db~mv2.png/v1/fill/w_831,h_665,al_c,usm_0.66_1.00_0.01/a6694c_c4aefe2a5f294a0faf6a2f7c19af32db~mv2.png",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 29,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_a730f2e789864a9cb75ce1dde1e52b07~mv2.png/v1/fill/w_831,h_665,al_c,usm_0.66_1.00_0.01/a6694c_a730f2e789864a9cb75ce1dde1e52b07~mv2.png",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 30,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_35eeecadd7f6495c99a3db846af81148~mv2.jpg/v1/fill/w_499,h_665,al_c,q_85,usm_0.66_1.00_0.01/a6694c_35eeecadd7f6495c99a3db846af81148~mv2.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 31,
                            ImagePath = "https://video.wixstatic.com/video/a6694c_5b80835e03c94fd6b720fdd2ceaa8865/1080p/mp4/file.mp4",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 32,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_e95ca1c8158d4caba5b6e7bedaa0eeab~mv2.png/v1/fill/w_831,h_665,al_c,usm_0.66_1.00_0.01/a6694c_e95ca1c8158d4caba5b6e7bedaa0eeab~mv2.png",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 33,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_6381e01ae9c340d598e09ea221ff60f2~mv2.png/v1/fill/w_831,h_665,al_c,usm_0.66_1.00_0.01/a6694c_6381e01ae9c340d598e09ea221ff60f2~mv2.png",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 34,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_48c50850bac34de3911eb25953af593d~mv2.png/v1/fill/w_831,h_665,al_c,usm_0.66_1.00_0.01/a6694c_48c50850bac34de3911eb25953af593d~mv2.png",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 35,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_757ebf6a259740c19feb8b3a9a6bc8f5~mv2.png/v1/fill/w_532,h_665,al_c,usm_0.66_1.00_0.01/a6694c_757ebf6a259740c19feb8b3a9a6bc8f5~mv2.png",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 36,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_dcd9e99fe4d44425b1f77612e83ac7c3~mv2.png/v1/fill/w_532,h_665,al_c,usm_0.66_1.00_0.01/a6694c_dcd9e99fe4d44425b1f77612e83ac7c3~mv2.png",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 37,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_2fa731434bbc41df95694781b5de4092~mv2.png/v1/fill/w_532,h_665,al_c,usm_0.66_1.00_0.01/a6694c_2fa731434bbc41df95694781b5de4092~mv2.png",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 38,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_1a21a0325bd2422081c51946789b8adf~mv2.png/v1/fill/w_532,h_665,al_c,usm_0.66_1.00_0.01/a6694c_1a21a0325bd2422081c51946789b8adf~mv2.png",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 39,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_f5e3c9c920fe41f395dc3bbb35e0161d~mv2.png/v1/fill/w_532,h_665,al_c,usm_0.66_1.00_0.01/a6694c_f5e3c9c920fe41f395dc3bbb35e0161d~mv2.png",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 40,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_ec1aa69e21ac48dc9cfd0bf0522f8caa~mv2.png/v1/fill/w_532,h_665,al_c,usm_0.66_1.00_0.01/a6694c_ec1aa69e21ac48dc9cfd0bf0522f8caa~mv2.png",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 41,
                            ImagePath = "https://video.wixstatic.com/video/a6694c_8570c70283b14cce830d5da15331979c/480p/mp4/file.mp4",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 42,
                            ImagePath = "https://video.wixstatic.com/video/a6694c_3e25a17da1ba451786a46aa4daee1698/480p/mp4/file.mp4",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 43,
                            ImagePath = "https://static.wixstatic.com/media/a6694c_c198248097424ec09f04d600b3ee3a40~mv2.png/v1/fill/w_886,h_665,al_c,usm_0.66_1.00_0.01/a6694c_c198248097424ec09f04d600b3ee3a40~mv2.png",
                            ProductId = 7
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ImageReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The image id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The identifier of the author.");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("The path of the image");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the product.");

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "AuthorId");

                    b.ToTable("ImageReviews", t =>
                        {
                            t.HasComment("The image of the review");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.MessageFromClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailForResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("MessagesFromClients");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Order Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressDeliveryId")
                        .HasColumnType("int")
                        .HasComment("Address Delivery Id");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("App User Id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of Order Creating");

                    b.Property<DateTime?>("DateShipping")
                        .HasColumnType("datetime2")
                        .HasComment("Date of Shipping Creating");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Absolute Discount value");

                    b.Property<string>("NoteForDelivery")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Note for Delivery");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Order Number");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasComment("Payment Method Id");

                    b.Property<int?>("PromoCodeId")
                        .HasColumnType("int")
                        .HasComment("Promo Code Id");

                    b.Property<decimal>("ShippingPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Shipping Price");

                    b.Property<int>("StatusOrderId")
                        .HasColumnType("int")
                        .HasComment("Status of Order");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Sub Total");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Tracking Number of Order");

                    b.HasKey("Id");

                    b.HasIndex("AddressDeliveryId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PromoCodeId")
                        .IsUnique()
                        .HasFilter("[PromoCodeId] IS NOT NULL");

                    b.HasIndex("StatusOrderId");

                    b.ToTable("Orders", t =>
                        {
                            t.HasComment("Order");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressDeliveryId = 1,
                            AppUserId = "d24ea792-6d5a-40a8-980c-71c2c9711113",
                            CreatedOn = new DateTime(2024, 3, 21, 9, 23, 16, 25, DateTimeKind.Utc).AddTicks(1076),
                            DateShipping = new DateTime(2024, 3, 21, 9, 23, 16, 25, DateTimeKind.Utc).AddTicks(2318),
                            Discount = 0m,
                            PaymentMethodId = 1,
                            ShippingPrice = 0m,
                            StatusOrderId = 1,
                            SubTotal = 0m,
                            Total = 0m,
                            TrackingNumber = "1234567890"
                        },
                        new
                        {
                            Id = 2,
                            AddressDeliveryId = 2,
                            AppUserId = "d24ea792-6d5a-40a8-980c-71c2c9711113",
                            CreatedOn = new DateTime(2024, 3, 21, 9, 23, 16, 25, DateTimeKind.Utc).AddTicks(3471),
                            DateShipping = new DateTime(2024, 3, 21, 9, 23, 16, 25, DateTimeKind.Utc).AddTicks(3474),
                            Discount = 0m,
                            PaymentMethodId = 2,
                            ShippingPrice = 0m,
                            StatusOrderId = 2,
                            SubTotal = 0m,
                            Total = 0m,
                            TrackingNumber = "1234567890x"
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Payment method id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Payment method type");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods", t =>
                        {
                            t.HasComment("Payment methods");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Наложен платеж"
                        },
                        new
                        {
                            Id = 2,
                            Type = "С карта"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Банков превод"
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The product's primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("The product's description");

                    b.Property<string>("IngredientINCIs")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("The product ingredients INCI");

                    b.Property<string>("Ingredients")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("The product ingredients");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The product's name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The product's price");

                    b.Property<string>("Purpose")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("Properties of the product");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("The product's quantity");

                    b.Property<string>("Weight")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("The product's weight");

                    b.HasKey("Id");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("The product model");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "<p>Част от лимитирана колекция празнични продукти, които може да закупите поотделно или като подаръчен комплект. 💝</p><p>Захарен скраб за тяло - натурален, био и ръчно изработен, с аромат на топли и уютни празници - стествен шоколадов аромат и леко цитрусов от етерично масло сладък портокал.</p><p>💛Този сладък скраб за тяло в два цвята е домашно приготвен с любов, масло от гроздови семки и какаово масло. Цвета му е натуралне от червена мика (минерален пигмент). Този скраб е прекрасен подарък за всеки, който се нуждае от малко повече релаксиращи моменти и грижа за себе си този сезон.</p><p>Обогатен с витамин Е.</p><p class=\"mb-0\">100% натурален</p><p class=\"mb-0\">86% от България</p><p class=\"mb-0\">13% Био</p>",
                            IngredientINCIs = "<p>Sucrose (Захар), Vitis Vinifera Seed Oil (Масло от гроздови семки), Theobroma Cacao Seed Butter (Какаово масло)*, Stearic Acid , Citrus Sinensis (Портокал) Peel Oil*, Limonene**,\r\nLinalool**, Citral**, Benzyl Alcohol, Ethylhexylglycerin, Tocopherol (Vit E), Mica***, CI 77491***. *Био **Компоненти на етерични масла ***Минерални пигменти От България 81,4% Био 14,5%</p>",
                            Ingredients = "<p><strong>Какаовото масло* </strong>- придава лек и естествен шоколадов аромат и предпазва и подхранва кожата.</p>\r\n<p><strong>Етеричното масло от сладък </strong>- портокал придават лек празничен аромат*.</p>\r\n<p><strong>Масло от гроздови семки </strong>- подхранва кожата. То е леко, некомедогенно и попива бързо.</p>\r\n<p><strong>Стеаринова киселина </strong>- наситена мастна 'киселина' която в природата се намира в много масла. В натуралния състав на какаовото масло е 24-37%, а в масло от шеа / карите е между 20-50%.</p>\r\n<p><strong>Витамин Е </strong>- натурален антиоксидант, който предпазва и защитава кожата от свободни радикали, процеси на оксидация и вредни влияния от околната среда.</p>\r\n<p>*Био</p>",
                            Name = "СКРАБ ЗА ТЯЛО",
                            Price = 9.00m,
                            Purpose = "<p>Изцяло натурален, може да използвате 1-2 пъти седмично, когато желаете нежно да ексфолирате кожата и да я направите по-мека и гладка.</p>\r\n<p>Използвайте с чисти ръце върху чиста и мокра кожа. Нежно масажирайте за ексфолиращ ефект. Изплакнете.</p>\r\n<p>Само за външна употреба. Да се пази от достъп на деца. Не използвайте при алергия към някоя от съставките. Съхранявайте добре затворено, защитено от пряка слънчева светлина.</p> ",
                            Quantity = 10,
                            Weight = "150 г"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description 2",
                            IngredientINCIs = "IngredientINCIs 2",
                            Ingredients = "Ingredients 2",
                            Name = "БАЛСАМ ЗА УСТНИ С ЖОЖОБА, КАКАО И ПЧЕЛЕН ВОСЪК",
                            Price = 4.00m,
                            Purpose = "Purpose 2",
                            Quantity = 20,
                            Weight = "200g"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description 3",
                            IngredientINCIs = "IngredientINCIs 3",
                            Ingredients = "Ingredients 3",
                            Name = "ХИДРАТИРАЩ КРЕМ С ШИПКА",
                            Price = 12.00m,
                            Purpose = "Purpose 3",
                            Quantity = 30,
                            Weight = "50 g"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description 4",
                            IngredientINCIs = "IngredientINCIs 4",
                            Ingredients = "Ingredients 4",
                            Name = "НЕЖЕН ЛОСИОН С НЕВЕН",
                            Price = 4.00m,
                            Purpose = "Purpose 4",
                            Quantity = 0,
                            Weight = "400g"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description 5",
                            IngredientINCIs = "IngredientINCIs 5",
                            Ingredients = "Ingredients 5",
                            Name = "ДВУФАЗНА МИЦЕЛАРНА ВОДА",
                            Price = 10.00m,
                            Purpose = "Purpose 5",
                            Quantity = 50,
                            Weight = "100 мл"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Description 6",
                            IngredientINCIs = "IngredientINCIs 6",
                            Ingredients = "Ingredients 6",
                            Name = "НАТУРАЛЕН КРЕМ ДЕЗОДОРАНТ",
                            Price = 8.50m,
                            Purpose = "Purpose 6",
                            Quantity = 70,
                            Weight = "50 g"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Description 7",
                            IngredientINCIs = "IngredientINCIs 7",
                            Ingredients = "Ingredients 7",
                            Name = "СЕРУМ МАСЛО С ШИПКА И ЖОЖОБА",
                            Price = 9.00m,
                            Purpose = "Purpose 7",
                            Quantity = 80,
                            Weight = "20 мл"
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("The product id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("The category id");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductsCategories", t =>
                        {
                            t.HasComment("Many to many relation between products and categories");
                        });

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 1
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ProductOrder", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The image path of the product at the time of the order");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The price of the product at the time of the order");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("The quantity of the product in the order");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ProductOrder", t =>
                        {
                            t.HasComment("Many to many relation between products and orders");
                        });

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            OrderId = 1,
                            ImagePath = "",
                            Price = 0m,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 1,
                            OrderId = 2,
                            ImagePath = "",
                            Price = 0m,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 2,
                            OrderId = 1,
                            ImagePath = "",
                            Price = 0m,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 3,
                            OrderId = 1,
                            ImagePath = "",
                            Price = 0m,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 3,
                            OrderId = 2,
                            ImagePath = "",
                            Price = 0m,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 4,
                            OrderId = 1,
                            ImagePath = "",
                            Price = 0m,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 5,
                            OrderId = 2,
                            ImagePath = "",
                            Price = 0m,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 6,
                            OrderId = 1,
                            ImagePath = "",
                            Price = 0m,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 6,
                            OrderId = 2,
                            ImagePath = "",
                            Price = 0m,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 7,
                            OrderId = 1,
                            ImagePath = "",
                            Price = 0m,
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Promo Code Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Owner of Promo Code");

                    b.Property<DateTime?>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Promo Code");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Discount of Total Price Order");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Expiration Date of Promo Code");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("PromoCodes", t =>
                        {
                            t.HasComment("Promo Code for one User");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "d24ea792-6d5a-40a8-980c-71c2c9711113",
                            Code = "-10 % за регистрация",
                            Discount = 0.1m,
                            ExpirationDate = new DateTime(2025, 3, 21, 9, 23, 17, 78, DateTimeKind.Utc).AddTicks(3933)
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "d24ea792-6d5a-40a8-980c-71c2c9711113",
                            Code = "-20 % отстъпка",
                            Discount = 0.2m,
                            ExpirationDate = new DateTime(2025, 3, 21, 9, 23, 17, 78, DateTimeKind.Utc).AddTicks(3940)
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the product.");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The identifier of the user that created the review.");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The comment of the review.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date when the review was created.");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("The rating of the review.");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The title of the review.");

                    b.HasKey("ProductId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Reviews", t =>
                        {
                            t.HasComment("This class represents a review of a product.");
                        });

                    b.HasData(
                        new
                        {
                            ProductId = 2,
                            AuthorId = "d24ea792-6d5a-40a8-980c-71c2c9711113",
                            Comment = "Great product, I love it!",
                            CreatedOn = new DateTime(2024, 3, 21, 11, 23, 17, 78, DateTimeKind.Local).AddTicks(3499),
                            Rating = 4,
                            Title = "Great product"
                        },
                        new
                        {
                            ProductId = 3,
                            AuthorId = "d24ea792-6d5a-40a8-980c-71c2c9711113",
                            Comment = "Great product, I love it!",
                            CreatedOn = new DateTime(2024, 3, 21, 11, 23, 17, 78, DateTimeKind.Local).AddTicks(3551),
                            Rating = 3,
                            Title = "Great product"
                        },
                        new
                        {
                            ProductId = 4,
                            AuthorId = "d24ea792-6d5a-40a8-980c-71c2c9711113",
                            Comment = "Great product, I love it!",
                            CreatedOn = new DateTime(2024, 3, 21, 11, 23, 17, 78, DateTimeKind.Local).AddTicks(3555),
                            Rating = 3,
                            Title = "Great product"
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ShippingOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of shipping");

                    b.Property<int>("ShippingDuration")
                        .HasColumnType("int")
                        .HasComment("Duration of shipping");

                    b.Property<int?>("ShippingProviderId")
                        .HasColumnType("int")
                        .HasComment("Shipping Provider Id");

                    b.HasKey("Id");

                    b.HasIndex("ShippingProviderId");

                    b.ToTable("ShippingOffices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Sofia",
                            OfficeAddress = "bul. Vitosha 100",
                            Price = 5.00m,
                            ShippingDuration = 2,
                            ShippingProviderId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Sofia",
                            OfficeAddress = "bul. Hristo Botev 20",
                            Price = 5.00m,
                            ShippingDuration = 2,
                            ShippingProviderId = 1
                        },
                        new
                        {
                            Id = 3,
                            City = "Varna",
                            OfficeAddress = "bul. Vitosha 100",
                            Price = 5.00m,
                            ShippingDuration = 2,
                            ShippingProviderId = 1
                        },
                        new
                        {
                            Id = 4,
                            City = "Burgas",
                            OfficeAddress = "bul. Vitosha 100",
                            Price = 5.00m,
                            ShippingDuration = 2,
                            ShippingProviderId = 1
                        },
                        new
                        {
                            Id = 5,
                            City = "Ruse",
                            OfficeAddress = "bul. Vitosha 100",
                            Price = 5.00m,
                            ShippingDuration = 2,
                            ShippingProviderId = 1
                        },
                        new
                        {
                            Id = 6,
                            City = "Sofia",
                            OfficeAddress = "bul. Vitosha 200",
                            Price = 5.00m,
                            ShippingDuration = 2,
                            ShippingProviderId = 2
                        },
                        new
                        {
                            Id = 7,
                            City = "Sofia",
                            OfficeAddress = "bul. Hristo Botev 30",
                            Price = 5.00m,
                            ShippingDuration = 2,
                            ShippingProviderId = 2
                        },
                        new
                        {
                            Id = 8,
                            City = "Sofia",
                            OfficeAddress = "bul. Bozveli 200",
                            Price = 5.00m,
                            ShippingDuration = 2,
                            ShippingProviderId = 2
                        },
                        new
                        {
                            Id = 9,
                            City = "Burgas",
                            OfficeAddress = "bul. Vitosha 200",
                            Price = 5.00m,
                            ShippingDuration = 2,
                            ShippingProviderId = 2
                        },
                        new
                        {
                            Id = 10,
                            City = "Ruse",
                            OfficeAddress = "bul. Vitosha 200",
                            Price = 5.00m,
                            ShippingDuration = 2,
                            ShippingProviderId = 2
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ShippingProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier of shipping provider");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of shipping provider");

                    b.HasKey("Id");

                    b.ToTable("ShippingProviders", t =>
                        {
                            t.HasComment("Shipping providers");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Еконт"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Спиди"
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.StatusOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the status");

                    b.HasKey("Id");

                    b.ToTable("StatusOrders", t =>
                        {
                            t.HasComment("Status of the order");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Заявена"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Отменена"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Изпратена"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Получена"
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Subscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.WishUser", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The user id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("The product id");

                    b.HasKey("AppUserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("WishesUsers", t =>
                        {
                            t.HasComment("This table contains the products that the user has added to his wish list");
                        });

                    b.HasData(
                        new
                        {
                            AppUserId = "d24ea792-6d5a-40a8-980c-71c2c9711113",
                            ProductId = 1
                        },
                        new
                        {
                            AppUserId = "d24ea792-6d5a-40a8-980c-71c2c9711113",
                            ProductId = 3
                        },
                        new
                        {
                            AppUserId = "d24ea792-6d5a-40a8-980c-71c2c9711113",
                            ProductId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.AddressDelivery", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", "AppUser")
                        .WithMany("AddressDelivery")
                        .HasForeignKey("AppUserId");

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.ShippingOffice", "ShippingOffice")
                        .WithMany()
                        .HasForeignKey("ShippingOfficeId");

                    b.Navigation("AppUser");

                    b.Navigation("ShippingOffice");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.AppUser", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AddressDelivery", "DefaultAddressDelivery")
                        .WithMany()
                        .HasForeignKey("DefaultAddressDeliveryId");

                    b.Navigation("DefaultAddressDelivery");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.BagUser", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("BagsUsers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ImageProduct", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ImageReview", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Review", "Review")
                        .WithMany("Images")
                        .HasForeignKey("ProductId", "AuthorId");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.MessageFromClient", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AddressDelivery", "AddressDelivery")
                        .WithMany("Orders")
                        .HasForeignKey("AddressDeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId");

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.PromoCode", "PromoCode")
                        .WithOne("Order")
                        .HasForeignKey("LilsCareApp.Infrastructure.Data.Models.Order", "PromoCodeId");

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.StatusOrder", "StatusOrder")
                        .WithMany("Orders")
                        .HasForeignKey("StatusOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressDelivery");

                    b.Navigation("AppUser");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PromoCode");

                    b.Navigation("StatusOrder");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ProductCategory", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("ProductsCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("ProductsCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ProductOrder", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Order", "Order")
                        .WithMany("ProductsOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("ProductsOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.PromoCode", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", "AppUser")
                        .WithMany("PromoCodes")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Review", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ShippingOffice", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.ShippingProvider", "ShippingProvider")
                        .WithMany("ShippingOffices")
                        .HasForeignKey("ShippingProviderId");

                    b.Navigation("ShippingProvider");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Subscriber", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.WishUser", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("WishesUsers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.AddressDelivery", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.AppUser", b =>
                {
                    b.Navigation("AddressDelivery");

                    b.Navigation("Orders");

                    b.Navigation("PromoCodes");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Category", b =>
                {
                    b.Navigation("ProductsCategories");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Order", b =>
                {
                    b.Navigation("ProductsOrders");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Product", b =>
                {
                    b.Navigation("BagsUsers");

                    b.Navigation("Images");

                    b.Navigation("ProductsCategories");

                    b.Navigation("ProductsOrders");

                    b.Navigation("Reviews");

                    b.Navigation("WishesUsers");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.PromoCode", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Review", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ShippingProvider", b =>
                {
                    b.Navigation("ShippingOffices");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.StatusOrder", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
