// <auto-generated />
using System;
using LilsCareApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LilsCareApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240425121254_01")]
    partial class _01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.AddressDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Address Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Address");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("App User Id");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Country");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("District");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("First Name Recipient");

                    b.Property<bool>("IsShippingToOffice")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Last Name Recipient");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Phone Number Recipient");

                    b.Property<string>("PostCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Post Code");

                    b.Property<int>("ShippingOfficeId")
                        .HasColumnType("int");

                    b.Property<string>("Town")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Town");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ShippingOfficeId");

                    b.ToTable("AddressDeliveries", t =>
                        {
                            t.HasComment("Address Delivery");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.AppConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AddressDeliveryPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The price at which the delivery to an address is paid.");

                    b.Property<decimal>("ExchangeRateBGN")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("The exchange rate of the leva.");

                    b.Property<decimal>("ExchangeRateEUR")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("The exchange rate of the euro.");

                    b.Property<decimal>("ExchangeRateRON")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("The exchange rate of the lei.");

                    b.Property<decimal>("FreeShipping")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The price at which the shipping is free.");

                    b.HasKey("Id");

                    b.ToTable("AppConfigs");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DefaultAddressDeliveryId")
                        .HasColumnType("int")
                        .HasComment("Default Address Delivery Id");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("First Name");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("The image of user");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Last Name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultAddressDeliveryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("App User");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.BagUser", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The user id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("The product id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("The quantity of the product that the user has added to his bag");

                    b.HasKey("AppUserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("BagsUsers", t =>
                        {
                            t.HasComment("This table contains the products that the user has added to his bag");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The category's primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NameId")
                        .HasColumnType("int")
                        .HasComment("The category's name Id");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("Categories", t =>
                        {
                            t.HasComment("The category of the product");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.CategoryName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NameBG")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The category's name in Bulgarian");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The category's name in English");

                    b.Property<string>("NameRO")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The category's name in Romanian");

                    b.HasKey("Id");

                    b.ToTable("CategoryNames");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.DeliveryMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Delivery method id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NameId")
                        .HasColumnType("int")
                        .HasComment("Delivery method name Id");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("DeliveryMethods");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.DeliveryName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The delivery name Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NameBG")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The delivery name in Bulgarian");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The delivery name in English");

                    b.Property<string>("NameRO")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The delivery name in Romanian");

                    b.HasKey("Id");

                    b.ToTable("DeliveryNames");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ImageProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The image id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ImageOrder")
                        .HasColumnType("int")
                        .HasComment("The order of the image in the product");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("The path of the image");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ImageProducts", t =>
                        {
                            t.HasComment("The image of the product");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ImageReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The image id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The identifier of the author.");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("The path of the image");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the product.");

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "AuthorId");

                    b.ToTable("ImageReviews", t =>
                        {
                            t.HasComment("The image of the review");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.MessageFromClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailForResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("MessagesFromClients");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Order Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Address");

                    b.Property<int?>("AddressDeliveryId")
                        .HasColumnType("int")
                        .HasComment("Address Delivery Id");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("App User Id");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Country");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of Order Creating");

                    b.Property<DateTime?>("DateShipping")
                        .HasColumnType("datetime2")
                        .HasComment("Date of Shipping Creating");

                    b.Property<int>("DeliveryMethodId")
                        .HasColumnType("int")
                        .HasComment("Method of Delivery");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Absolute Discount value");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("District");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Email");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Exchange Rate of the Prices");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("First Name Recipient");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit")
                        .HasComment("Is Paid Order");

                    b.Property<bool>("IsShippingToOffice")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Language of Order, determinate the currency of the prices");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Last Name Recipient");

                    b.Property<string>("NoteForDelivery")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Note for Delivery");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Order Number");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasComment("Payment Method Id");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Phone Number Recipient");

                    b.Property<string>("PostCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Post Code");

                    b.Property<int?>("PromoCodeId")
                        .HasColumnType("int")
                        .HasComment("Promo Code Id");

                    b.Property<int?>("ShippingOfficeId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Shipping Price");

                    b.Property<int>("StatusOrderId")
                        .HasColumnType("int")
                        .HasComment("Status of Order");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Sub Total Price of Order");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total Price of Order");

                    b.Property<string>("Town")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Town");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Tracking Number of Order");

                    b.HasKey("Id");

                    b.HasIndex("AddressDeliveryId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("DeliveryMethodId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PromoCodeId")
                        .IsUnique()
                        .HasFilter("[PromoCodeId] IS NOT NULL");

                    b.HasIndex("ShippingOfficeId");

                    b.HasIndex("StatusOrderId");

                    b.ToTable("Orders", t =>
                        {
                            t.HasComment("Order");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Payment method id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NameId")
                        .HasColumnType("int")
                        .HasComment("Payment method name Id");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("PaymentMethods", t =>
                        {
                            t.HasComment("Payment methods");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.PaymentName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Payment name id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NameBG")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The payment name in Bulgarian");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The payment name in English");

                    b.Property<string>("NameRO")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The payment name in Romanian");

                    b.HasKey("Id");

                    b.ToTable("PaymentNames");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The product's primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsShow")
                        .HasColumnType("bit")
                        .HasComment("Is the product show on online store");

                    b.Property<int>("NameId")
                        .HasColumnType("int")
                        .HasComment("The product's name Id");

                    b.Property<int>("OptionalId")
                        .HasColumnType("int")
                        .HasComment("The product's optional Id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The product's price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("The product's quantity");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.HasIndex("OptionalId");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("The product model");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("The product id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("The category id");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductsCategories", t =>
                        {
                            t.HasComment("Many to many relation between products and categories");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ProductName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NameBG")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The product's name in Bulgarian");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The product's name in English");

                    b.Property<string>("NameRO")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The product's name in Romanian");

                    b.HasKey("Id");

                    b.ToTable("ProductNames");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ProductOptional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OptionalBG")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The product's optional in Bulgarian");

                    b.Property<string>("OptionalEN")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The product's optional in English");

                    b.Property<string>("OptionalRO")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The product's optional in Romanian");

                    b.HasKey("Id");

                    b.ToTable("ProductOptionals");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ProductOrder", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The image path of the product at the time of the order");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The price of the product at the time of the order");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("The quantity of the product in the order");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ProductsOrders", t =>
                        {
                            t.HasComment("Many to many relation between products and orders");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Promo Code Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Owner of Promo Code");

                    b.Property<DateTime?>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CodeId")
                        .HasColumnType("int")
                        .HasComment("Promo Code Id");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Discount of Total Price Order");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Expiration Date of Promo Code");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CodeId");

                    b.ToTable("PromoCodes", t =>
                        {
                            t.HasComment("Promo Code for one User");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.PromoCodeName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Promo code name id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NameBG")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The promo code name in Bulgarian");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The promo code name in English");

                    b.Property<string>("NameRO")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The promo code name in Romanian");

                    b.HasKey("Id");

                    b.ToTable("PromoCodeNames");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the product.");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The identifier of the user that created the review.");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The comment of the review.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date when the review was created.");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("The rating of the review.");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The title of the review.");

                    b.HasKey("ProductId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Reviews", t =>
                        {
                            t.HasComment("This class represents a review of a product.");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The section's primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DescriptionId")
                        .HasColumnType("int")
                        .HasComment("The section's description Id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("The product's primary key");

                    b.Property<int>("SectionOrder")
                        .HasColumnType("int")
                        .HasComment("The section's order in page");

                    b.Property<int>("TitleId")
                        .HasColumnType("int")
                        .HasComment("The section's title Id");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TitleId");

                    b.ToTable("Sections", t =>
                        {
                            t.HasComment("The section model. Keeping descriptions of product");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.SectionDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionBG")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("The section's description in Bulgarian");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("The section's description in English");

                    b.Property<string>("DescriptionRO")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("The section's description in Romanian");

                    b.HasKey("Id");

                    b.ToTable("SectionDescriptions");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.SectionTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TitleBG")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The section's title in Bulgarian");

                    b.Property<string>("TitleEN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The section's title in English");

                    b.Property<string>("TitleRO")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The section's title in Romanian");

                    b.HasKey("Id");

                    b.ToTable("SectionTitles");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ShippingOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of shipping");

                    b.Property<int>("ShippingDuration")
                        .HasColumnType("int")
                        .HasComment("Duration of shipping");

                    b.Property<int>("ShippingProviderId")
                        .HasColumnType("int")
                        .HasComment("Shipping Provider Id");

                    b.HasKey("Id");

                    b.HasIndex("ShippingProviderId");

                    b.ToTable("ShippingOffices");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ShippingProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier of shipping provider");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of shipping provider");

                    b.HasKey("Id");

                    b.ToTable("ShippingProviders", t =>
                        {
                            t.HasComment("Shipping providers");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.StatusOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NameId")
                        .HasColumnType("int")
                        .HasComment("Name of the status Id");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("StatusOrders", t =>
                        {
                            t.HasComment("Status of the order");
                        });
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.StatusOrderName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Status order name id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NameBG")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The status order name in Bulgarian");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The status order name in English");

                    b.Property<string>("NameRO")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The status order name in Romanian");

                    b.HasKey("Id");

                    b.ToTable("StatusOrderNames");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Subscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.WishUser", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The user id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("The product id");

                    b.HasKey("AppUserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("WishesUsers", t =>
                        {
                            t.HasComment("This table contains the products that the user has added to his wish list");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.AddressDelivery", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", "AppUser")
                        .WithMany("AddressDelivery")
                        .HasForeignKey("AppUserId");

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.ShippingOffice", "ShippingOffice")
                        .WithMany("DeliveryAddresses")
                        .HasForeignKey("ShippingOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("ShippingOffice");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.AppUser", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AddressDelivery", "DefaultAddressDelivery")
                        .WithMany()
                        .HasForeignKey("DefaultAddressDeliveryId");

                    b.Navigation("DefaultAddressDelivery");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.BagUser", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("BagsUsers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Category", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.CategoryName", "Name")
                        .WithMany("Categories")
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Name");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.DeliveryMethod", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.DeliveryName", "Name")
                        .WithMany("DeliveryMethod")
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Name");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ImageProduct", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ImageReview", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Review", "Review")
                        .WithMany("Images")
                        .HasForeignKey("ProductId", "AuthorId");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.MessageFromClient", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AddressDelivery", "AddressDelivery")
                        .WithMany("Orders")
                        .HasForeignKey("AddressDeliveryId");

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId");

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.DeliveryMethod", "DeliveryMethod")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.PromoCode", "PromoCode")
                        .WithOne("Order")
                        .HasForeignKey("LilsCareApp.Infrastructure.Data.Models.Order", "PromoCodeId");

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.ShippingOffice", "ShippingOffice")
                        .WithMany()
                        .HasForeignKey("ShippingOfficeId");

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.StatusOrder", "StatusOrder")
                        .WithMany("Orders")
                        .HasForeignKey("StatusOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressDelivery");

                    b.Navigation("AppUser");

                    b.Navigation("DeliveryMethod");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PromoCode");

                    b.Navigation("ShippingOffice");

                    b.Navigation("StatusOrder");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.PaymentMethod", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.PaymentName", "Name")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Name");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Product", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.ProductName", "Name")
                        .WithMany("Products")
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.ProductOptional", "Optional")
                        .WithMany("Products")
                        .HasForeignKey("OptionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Name");

                    b.Navigation("Optional");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ProductCategory", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("ProductsCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("ProductsCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ProductOrder", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Order", "Order")
                        .WithMany("ProductsOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("ProductsOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.PromoCode", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", "AppUser")
                        .WithMany("PromoCodes")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.PromoCodeName", "Code")
                        .WithMany("PromoCodes")
                        .HasForeignKey("CodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Code");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Review", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Section", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.SectionDescription", "Description")
                        .WithMany("Sections")
                        .HasForeignKey("DescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("Sections")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.SectionTitle", "Title")
                        .WithMany("Sections")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Description");

                    b.Navigation("Product");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ShippingOffice", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.ShippingProvider", "ShippingProvider")
                        .WithMany("ShippingOffices")
                        .HasForeignKey("ShippingProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShippingProvider");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.StatusOrder", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.StatusOrderName", "Name")
                        .WithMany("StatusOrders")
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Name");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Subscriber", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.WishUser", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("WishesUsers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LilsCareApp.Infrastructure.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.AddressDelivery", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.AppUser", b =>
                {
                    b.Navigation("AddressDelivery");

                    b.Navigation("Orders");

                    b.Navigation("PromoCodes");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Category", b =>
                {
                    b.Navigation("ProductsCategories");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.CategoryName", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.DeliveryMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.DeliveryName", b =>
                {
                    b.Navigation("DeliveryMethod");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Order", b =>
                {
                    b.Navigation("ProductsOrders");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.PaymentName", b =>
                {
                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Product", b =>
                {
                    b.Navigation("BagsUsers");

                    b.Navigation("Images");

                    b.Navigation("ProductsCategories");

                    b.Navigation("ProductsOrders");

                    b.Navigation("Reviews");

                    b.Navigation("Sections");

                    b.Navigation("WishesUsers");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ProductName", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ProductOptional", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.PromoCode", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.PromoCodeName", b =>
                {
                    b.Navigation("PromoCodes");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.Review", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.SectionDescription", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.SectionTitle", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ShippingOffice", b =>
                {
                    b.Navigation("DeliveryAddresses");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.ShippingProvider", b =>
                {
                    b.Navigation("ShippingOffices");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.StatusOrder", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("LilsCareApp.Infrastructure.Data.Models.StatusOrderName", b =>
                {
                    b.Navigation("StatusOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
